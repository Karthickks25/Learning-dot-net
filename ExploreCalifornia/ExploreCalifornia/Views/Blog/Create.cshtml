@addTagHelper "*, Microsoft.AspNetCore.Mvc.TagHelpers"
@model ExploreCalifornia.Models.Post
@{
    Layout = "_Layout";
}

<h1>Create Blog</h1>
<fieldset>
    <form asp-action="Create" asp-controller="Blog">
        <div asp-validation-summary="None" class="input-validation-error"></div>
        <p>
            <label asp-for="Title"></label>
            <input asp-for="Title" class="form-control" placeholder="Blog post title" />
            <span asp-validation-for="Title"></span>
        </p>
        <p>
            <label asp-for="Body"></label>
            <textarea asp-for="Body" class="form-control" placeholder="Blog description goes here"></textarea>
            <span asp-validation-for="Body"></span>
        </p>
        <p>
            <button type="submit">Create Post</button>
        </p>
    </form>

    @* MVC - Old approach *@
    @*@using (Html.BeginForm())
        {
            <p>
                @Html.ValidationSummary()
                </p>
                <p>
                    @Html.LabelFor(x=>x.Title)
                        @Html.EditorFor(x=>x.Title)
                        @Html.ValidationMessageFor(x=>x.Title)

                </p>

                <p>
                    @Html.LabelFor(x => x.Body)
                    @Html.EditorFor(x => x.Body)
                    @Html.TextAreaFor(x=>x.Body) we can keep the EditorFor and use the data annotation(DataType(DataType.MultiLineText)) to achieve the same
                    @Html.ValidationMessageFor(x => x.Body)
                </p>
                <p>
                    <button>Create Post</button>
                </p>
         }*@
</fieldset>